<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans" 
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
       xmlns:sec="http://www.springframework.org/schema/security"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
       http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd">

  

    <!--//////// Authorization Server ////////-->

    <!-- Just for testing... -->
    <sec:http pattern="/oauth/cache_approvals" security="none" />
    <sec:http pattern="/oauth/uncache_approvals" security="none" />

    <sec:http pattern="/oauth/token"
              create-session="stateless"
              authentication-manager-ref="clientAuthenticationManager"
              entry-point-ref="oauthAuthenticationEntryPoint">
        
        <sec:intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
        <sec:anonymous enabled="false" />
        <sec:http-basic entry-point-ref="oauthAuthenticationEntryPoint" />
        <!-- include this only if you need to authenticate clients via request parameters -->
        <sec:custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER" />
        <sec:access-denied-handler ref="oauthAccessDeniedHandler" />
    </sec:http>

    <!--
        The OAuth2 protected resources are separated out into their own block so we can deal with authorization and error
        handling separately. This isn't mandatory, but it makes it easier to control the behaviour.
    -->
    <sec:http pattern="/oauth/(users|clients)/.*" request-matcher="regex"
              create-session="stateless"
              entry-point-ref="oauthAuthenticationEntryPoint"
              use-expressions="true">

        <sec:anonymous enabled="false" />
        
        <sec:intercept-url pattern="/oauth/users/([^/].*?)/tokens/.*"
                           access="#oauth2.clientHasRole('ROLE_CLIENT') and (hasRole('ROLE_USER') or #oauth2.isClient()) and #oauth2.hasScope('write')"
                           method="DELETE" />

        <sec:intercept-url pattern="/oauth/users/.*"
                           access="#oauth2.clientHasRole('ROLE_CLIENT') and (hasRole('ROLE_USER') or #oauth2.isClient()) and #oauth2.hasScope('read')"
                           method="GET" />

        <sec:intercept-url pattern="/oauth/clients/.*" access="#oauth2.clientHasRole('ROLE_CLIENT') and #oauth2.isClient() and #oauth2.hasScope('read')"
                           method="GET" />

        <sec:custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
        <sec:access-denied-handler ref="oauthAccessDeniedHandler" />
        <sec:expression-handler ref="oauthWebExpressionHandler" />
    </sec:http>


    <bean id="clientCredentialsTokenEndpointFilter" class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <property name="authenticationManager" ref="clientAuthenticationManager" />
    </bean>

    <sec:authentication-manager id="clientAuthenticationManager">
        <sec:authentication-provider user-service-ref="clientDetailsUserService" />
    </sec:authentication-manager>

    <bean id="clientDetailsUserService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <constructor-arg ref="clientDetails" />
    </bean>


    <oauth:authorization-server client-details-service-ref="clientDetails"
                                token-services-ref="tokenServices"
                                user-approval-handler-ref="userApprovalHandler">
        <oauth:authorization-code />
        <oauth:implicit />
        <oauth:refresh-token />
        <oauth:client-credentials />
        <oauth:password />
    </oauth:authorization-server>

    <oauth:client-details-service id="clientDetails">
        <oauth:client client-id="my-trusted-client"
                      authorized-grant-types="password,authorization_code,refresh_token,implicit"
                      authorities="ROLE_CLIENT, ROLE_TRUSTED_CLIENT"
                      scope="read,write,trust"
                      access-token-validity="60"/>

        <oauth:client client-id="my-trusted-client-with-secret"
                      authorized-grant-types="password,authorization_code,refresh_token,implicit"
                      secret="somesecret"
                      authorities="ROLE_CLIENT, ROLE_TRUSTED_CLIENT" />

        <oauth:client client-id="my-client-with-secret"
                      authorized-grant-types="client_credentials"
                      authorities="ROLE_CLIENT"
                      scope="read" secret="secret" />

        <oauth:client client-id="my-less-trusted-client"
                      authorized-grant-types="authorization_code,implicit"
                      authorities="ROLE_CLIENT" />

        <oauth:client client-id="my-less-trusted-autoapprove-client"
                      authorized-grant-types="implicit"
                      authorities="ROLE_CLIENT" />

        <oauth:client client-id="my-client-with-registered-redirect"
                      authorized-grant-types="authorization_code,client_credentials"
                      authorities="ROLE_CLIENT"
                      redirect-uri="http://anywhere?key=value"
                      scope="read,trust" />

        <oauth:client client-id="my-untrusted-client-with-registered-redirect"
                      authorized-grant-types="authorization_code"
                      authorities="ROLE_CLIENT"
                      redirect-uri="http://anywhere"
                      scope="read" />

        <oauth:client client-id="tonr"
                      resource-ids="sparklr"
                      authorized-grant-types="authorization_code,implicit"
                      authorities="ROLE_CLIENT"
                      scope="read,write"
                      secret="secret" />
    </oauth:client-details-service>


    <bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <property name="tokenStore" ref="tokenStore" />
        <property name="supportRefreshToken" value="true" />
        <property name="clientDetailsService" ref="clientDetails"/>
    </bean>

    <bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore" />

    <bean id="userApprovalHandler" class="org.springframework.security.oauth.examples.sparklr.oauth.SparklrUserApprovalHandler">
        <property name="autoApproveClients">
            <set>
                <value>my-less-trusted-autoapprove-client</value>
            </set>
        </property>
        <property name="tokenServices" ref="tokenServices" />
    </bean>



    <!--//////// Resource Server ////////-->

    <!--
        The OAuth2 protected resources are separated out into their own block so we can deal with authorization and error
        handling separately. This isn't mandatory, but it makes it easier to control the behaviour.
    -->
    <sec:http pattern="/photos/**"
              create-session="never"
              entry-point-ref="oauthAuthenticationEntryPoint"
              access-decision-manager-ref="accessDecisionManager">

        <sec:anonymous enabled="false" />
        <sec:intercept-url pattern="/photos" access="ROLE_USER,SCOPE_READ" />
        <sec:intercept-url pattern="/photos/trusted/**" access="ROLE_CLIENT,SCOPE_TRUST" />
        <sec:intercept-url pattern="/photos/user/**" access="ROLE_USER,SCOPE_TRUST" />
        <sec:intercept-url pattern="/photos/**" access="ROLE_USER,SCOPE_READ" />
        <sec:custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
        <sec:access-denied-handler ref="oauthAccessDeniedHandler" />
    </sec:http>

    <sec:http access-denied-page="/login.jsp?authorization_error=true" disable-url-rewriting="true">
        <sec:intercept-url pattern="/oauth/**" access="ROLE_USER" />
        <sec:intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />

        <sec:form-login authentication-failure-url="/login.jsp?authentication_error=true"
                        default-target-url="/index.jsp"
                        login-page="/login.jsp"
                        login-processing-url="/login.do" />

        <sec:logout logout-url="/logout.do"
                    logout-success-url="/index.jsp" />

        <sec:anonymous />
    </sec:http>


    <bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
        <constructor-arg>
            <list>
                <bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
                <bean class="org.springframework.security.access.vote.RoleVoter" />
                <bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
            </list>
        </constructor-arg>
    </bean>

    <sec:authentication-manager alias="authenticationManager">
        <sec:authentication-provider>
            <sec:user-service>
                <sec:user name="marissa" password="koala" authorities="ROLE_USER" />
                <sec:user name="paul" password="emu" authorities="ROLE_USER" />
            </sec:user-service>
        </sec:authentication-provider>
    </sec:authentication-manager>



    <!--//////// Common ////////-->

    <oauth:resource-server id="resourceServerFilter" resource-id="sparklr" token-services-ref="tokenServices" />

    <bean id="oauthAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="sparklr2" />
    </bean>

    <bean id="oauthAccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

    
    <sec:global-method-security pre-post-annotations="enabled" proxy-target-class="true">
        <!--you could also wire in the expression handler up at the layer of the http filters. See https://jira.springsource.org/browse/SEC-1452 -->
        <sec:expression-handler ref="oauthExpressionHandler" />
    </sec:global-method-security>
    
    <oauth:expression-handler id="oauthExpressionHandler" />
    <oauth:web-expression-handler id="oauthWebExpressionHandler" />

</beans>
