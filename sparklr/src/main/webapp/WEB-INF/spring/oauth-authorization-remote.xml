<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
       xmlns:sec="http://www.springframework.org/schema/security"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
       http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd">

    <!--//////// Configuration for stand-alone Resource Server with remote Authorization Server ////////-->

    <context:property-placeholder location="/WEB-INF/remote-auth-server.properties" />


    <!--//////// Resource server ////////-->

    <!--
        The OAuth2 protected resources are separated out into their own block so we can deal with authorization and error
        handling separately. This isn't mandatory, but it makes it easier to control the behaviour.
    -->
    <sec:http pattern="/photos/**"
              create-session="never"
              entry-point-ref="oauthAuthenticationEntryPoint"
              access-decision-manager-ref="accessDecisionManager">

        <sec:anonymous enabled="false" />
        <sec:intercept-url pattern="/photos"  /> <!-- access="ROLE_USER,SCOPE_READ" -->
        <sec:intercept-url pattern="/photos/trusted/**" /> <!-- access="ROLE_CLIENT,SCOPE_TRUST" -->
        <sec:intercept-url pattern="/photos/user/**" /> <!-- access="ROLE_USER,SCOPE_TRUST" -->
        <sec:intercept-url pattern="/photos/**" /> <!--access="ROLE_USER,SCOPE_READ" -->
        <sec:custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
        <sec:access-denied-handler ref="oauthAccessDeniedHandler" />
    </sec:http>



    <!--//////// Remote Authorization Server ////////-->

    <oauth:rest-template id="checkTokenResourceRestTemplate" resource="tokenInfoResource" />

    <oauth:resource id="tokenInfoResource"
            type="client_credentials"
            client-id="${oaas.client_id}"
            client-secret="${oaas.client_secret}"
            scope="${oaas.scope}"
            access-token-uri="${oaas.token_endpoint}" />

     <bean id="tokenServices" class="cz.cvut.zuul.support.spring.provider.RemoteResourceTokenServices"
           p:restTemplate-ref="checkTokenResourceRestTemplate"
           p:tokenInfoEndpointUrl="${oaas.tokeninfo_endpoint}" />

</beans>
